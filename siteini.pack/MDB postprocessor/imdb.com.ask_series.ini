**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing IMDB data from TvGuide websites
* @MinSWversion: V3.1.1
*     -  (postprocess V3.0.1)
* @Site: imdb.com
* @Revision 10 - [20/10/2020] Jan van Straaten/Mat8861
* @Revision 9 - [18/10/2020] Jan van Straaten
*	- accepts 7 and 8 digit showid
*	- added origigal title
*	- improved primary search url
*	- http to https
* 	- cleanup of review
* @Revision 8 - [25/08/2020] Jan van Straaten
*	- complete rewrite, uses subpages to get a full list with all the episodes
* @Revision 7 - [25/05/2016] Jan van Straaten
* 	- support for match on episode-num or sub-title, use of new scopes
*	- added mdbinitype
* @Revision 6 - [12/02/2016] Jan van Straaten
* 	- fix of the episode and productiondate
* @Revision 5 - [07/12/2015] Jan van Straaten
*   - change element names, mdb_show_id and mdb_episode_id
* @Revision 4 - [30/09/2015] Jan van Straaten
*     - added mdb-category
* @Revision 3 - [11/08/2014] Jan van Straaten
*     - improved mdb_episode_id selection
* @Revision 2 - [09/06/2014] Jan van Straaten
*	  - added url header
* @Revision 1 - [24/11/2013] Jan van Straaten
*     - version check enabled
* @Revision 0 - [09/11/2013] Jan van Straaten
*     - creation
* @Remarks: Series data extraction. English version
* @header_end
**------------------------------------------------------------------------------------------------
*
*
site {url=imdb.com|mdbinitype=serie|cultureinfo=en-GB|charset=UTF-8|matchfactor=70|searchsite=ask}
site {episodesystem=onscreen}
scope.range {(primarysearch)|end}
* primary search (using imdb's advanced search):
*url_primarysearch {url(urlencode=1,2,3,4)|https://www.ask.com/web?&q=|imdb+|'title'|+|tv%20series|/NCR}
url_primarysearch {url(urlencode=1,2,3,4)|https://www.ask.com/web?&q=|imdb+|'title'|+|%28tv series%29|/NCR}
url_primarysearch.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_show_id.scrub {regex|primary||/tt(\d{7,8})/||}

*
* imdb url's:
url_mdb_p1 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/} * the 'home page to get the season count number
url_mdb_p2 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/episodes?season=|subpage|}
url_mdb_p3 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/} * the episode detail page
url_mdb_p4 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/plotsummary} * the full synopsis, not used
url_mdb_p5 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/fullcredits/?ref_=tt_ov_st_sm} *full cast and crew (director, writer, actor)
url_mdb_p6 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/reviews} *user reviews, only from the whole series
*
url_mdb.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_temp_9.scrub {regex|p1||<div class=\"seasons-and-year-nav\">.+?<div>\s+?<a href=\"/title/tt\d+?/episodes\?season=(\d+?)&ref_||} * the subpage count value from the 'last season on p1
subpage_mdb_p2.format {list(count='mdb_temp_9')|1}
*subpage_mdb_p2.format {list(format=D0 step=1 count='mdb_variable_element')|1}
end_scope
*
scope.range {(match)|end}
* imdb elements
* possible mustmatch elements
* episodetitle (sub-title)
mdb_episodetitlelist.scrub {multi()|p2|<strong><a href="/title/tt|"name">|</a>|</strong>}
* episode-num
*<div>S3, Ep3</div>
mdb_episodenumlist.scrub {regex(pattern="S'S1', Ep'E1'")|p2||<div>(S\d+?,\sEp\d+?)</div>||}
*  this is the overall series title 
mdb_title.scrub {single|p1|<div class="title_wrapper">|<h1 class="">|</h1>|</h1>}
* original title
mdb_title.scrub {single|p1|<div class="title_wrapper">|<div class="originalTitle">|<span class|</div>}
* list of all episode id's
mdb_temp_6.scrub {regex|p2||<strong><a href=\"/title/tt(\d+?)/\?ref_=||} 
end_scope
*
scope.range {(getelements)|end}
* in case of matched subtitle
mdb_temp_1.modify {calculate('mdb_episodetitlelist' not "" type=element format=F0)|'mdb_episodetitlelist' 'mdb_subtitle' @} * index of the episode
* in case of matched episodenum
mdb_temp_1.modify {calculate('mdb_episodenumlist' not "" type=element format=F0)|'mdb_episodenumlist' 'mdb_episode' @} * index of the episode
** get the mdb_episode_id
mdb_episode_id.modify {substring(type=element)|'mdb_temp_6' 'mdb_temp_1' 1}
*
mdb_productiondate.scrub {regex|p3||\"datePublished":\s\"(\d{4})-||}
* "genre": "Comedy",
mdb_category.scrub {regex()|p3||\"genre\":\s\"(.+?)\",||}
* credits on p1 & p5
mdb_actor.scrub {multi()|p1|<table class="cast_list">|title="|"|</table>} *added
mdb_actor.modify {cleanup(tags="<"">")} *added
mdb_actor.scrub {multi()|p3|<h4 class="inline">Stars:</h4>|title="|"|<\/div>} *added
mdb_actor.scrub {multi()|p5|<table class="cast_list">|title="|"|</table>}
mdb_director.scrub {regex()|p5||Directed by.+?<a href=.+?>\s*(.+?)\r</a>||}
* starrateing on p3
mdb_starrating.scrub {regex|p3||\"ratingValue\":\s\"(\d\.\d)\"||}
mdb_starratingvotes.scrub {regex|p3||"ratingCount":\s(\d+?),||}
mdb_showicon.scrub {regex()|p3||\"image\":\s\"([^"]*)\",||} *remove characters after "
**
* evt country https://www.imdb.com/title/tt1610527/locations?ref_=ttco_sa_4
* review and commentsummary only from the 'top' series page p1/review (rarely found on episode pages)
mdb_commentsummary.scrub {regex()|p6||class=\"title\"\s>\s(.+?)\s+?</a>||}
mdb_commentsummary.modify {substring(type=element)|0 5}
mdb_review.scrub {regex()|p6||^.*?<div class=\"content\">\s+<div class=\"text.*?\">(.+?)<\/div>||} 
mdb_review.modify {cleanup}
mdb_plot.scrub {regex()|p3||<div class=\"summary_text\">\s+([^<?a?]*)\s+?.*<||} * was adding "see full summary" + "add a plot"
mdb_description.scrub {regex()|p1||<div class=\"summary_text\">\\s+(.*)\s+[^<]*<||}* was adding "see full summary"

mdb_subtitle.scrub {regex()|p3||"url": "/title/tt\d{7\|8}/\",\s+?\"name\":\s\"(.+?)\",||}
* episode from p3   <div class="bp_heading">Season 3 <span class="ghost">!?!?!</span> Episode 3</div>
mdb_temp_2.scrub {regex|p3||<div class=\"bp_heading\">Season\s*(\d+?)\s*<span||} * seasom
mdb_temp_3.scrub {regex|p3||</span>\s*Episode\s*(\d+?)\s*</div>||} * episode
* episode in onscreen system. Will be converted to the site episodesystem value automatically
mdb_episode.modify {set("")|S'mdb_temp_2' E'mdb_temp_3'}
end_scope
