**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing IMDB data from TvGuide websites
* @MinSWversion: V3.1.5
*     -  (postprocess V3.0.3)
* @Site: imdb.com, primary search with imdb
* @Revision 10 [26/02/2021] Jan van Straaten
* 	- fix of actors from p4
* @Revision 9 [16/01/2021] Jan van Straaten
*	- reduce max number of seasons to 50
* @Revision 8 [03/01/2021] Jan van Straaten
*	- rewritten , based on imdb.com-ask_series rev 10
* @Remarks: Series data extraction.
* @header_end
**------------------------------------------------------------------------------------------------
*
site {url=imdb.com|mdbinitype=serie|cultureinfo=en-GB|charset=UTF-8|matchfactor=70|searchsite=imdb}
site {episodesystem=onscreen}
scope.range {(primarysearch)|end}
* primary search (using imdb's title search):
url_primarysearch {url|https://www.imdb.com/find?q=|'title'|&ref_=nv_sr_sm}
*url_primarysearch.modify {remove()|%28%29} * in case no productiondate
url_primarysearch.modify {replace()| |+}
url_primarysearch.modify {replace()|'|%27}
url_primarysearch.modify {replace()|:|%3A}
url_primarysearch.modify {replace()|https%3A|https:}
url_primarysearch.modify {replace()|;|%3B}
url_primarysearch.headers {customheader=Accept-Encoding=gzip,deflate}
mdb_show_id.scrub {regex()|primary||/tt(\d{7,8})/||}
* limit to 3 candidates  .. it apeared very rare that matches are found beyond that
mdb_show_id.modify {substring(type=element)|0 3}
*
* imdb url's:
url_mdb_p1 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/} * the 'home page to get the season count number
* get the foreign language titles
url_mdb_p2 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/releaseinfo#akas}
url_mdb_p3 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/episodes?season=|subpage|}
url_mdb_p4 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/} * the episode detail page
url_mdb_p5 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/fullcredits/?ref_=tt_ov_st_sm} *full cast and crew (director, writer, actor)
url_mdb_p6 {url|primary|https://www.imdb.com/title/tt|mdb_show_id|/reviews} *user reviews, only from the whole series
*url_mdb_p7 {url|primary|https://www.imdb.com/title/tt|mdb_episode_id|/plotsummary} * the full synopsis, not used
*
url_mdb.headers {customheader=Accept-Encoding=gzip,deflate}
*
mdb_temp_9.scrub {regex()|p1||<div class=\"seasons-and-year-nav\">.+?<div>\s+?<a href=\"/title/tt\d+?/episodes\?season=(\d+?)&ref_||} * the subpage count value from the 'last season on p1
subpage_mdb_p3.format {list(count='mdb_temp_9')|1}
*subpage_mdb_p3.format {list(format=D0 step=1 count='mdb_variable_element')|1}
end_scope
*
scope.range {(match)|end}
mdb_temp_9.modify {set('mdb_temp_9' > "50")|50} * limit number of seasons, 60 is default
* imdb elements
* possible mustmatch elements
* episodetitle (sub-title)
mdb_episodetitlelist.scrub {multi()|p3|<strong><a href="/title/tt|"name">|</a>|</strong>}
* episode-num
*<div>S3, Ep3</div>
mdb_episodenumlist.scrub {regex(pattern="S'S1', Ep'E1'")|p3||<div>(S\d+?,\sEp\d+?)</div>||}
*  this is the overall series title 
mdb_title.scrub {single(separator="<span" include=first)|p1|<div class="title_wrapper">|<h1 class="">|</h1>|</h1>}
* original title
mdb_title.scrub {single()|p1|<div class="title_wrapper">|<div class="originalTitle">|<span class|</div>}
mdb_title.scrub {regex()|p2||<td class=\"aka-item__title\">(.+?)</td>||}
mdb_title.modify {cleanup}
* list of all episode id's
mdb_temp_6.scrub {regex|p3||<strong><a href=\"/title/tt(\d+?)/\?ref_=||} 
end_scope
*
scope.range {(getelements)|end}
* in case of matched subtitle , execute only if mdb_subtitle is matched
mdb_temp_1.modify {calculate(['mdb_episodetitlelist' not ""] ['mdb_subtitle' not ""] & type=element format=F0)|'mdb_episodetitlelist' 'mdb_subtitle' @} * index of the episode
* in case of matched episodenum
mdb_temp_1.modify {calculate('mdb_episodenumlist' not "" type=element format=F0)|'mdb_episodenumlist' 'mdb_episode' @} * index of the episode
** get the mdb_episode_id
mdb_episode_id.modify {substring(type=element)|'mdb_temp_6' 'mdb_temp_1' 1}
*
mdb_productiondate.scrub {regex|p4||\"datePublished":\s\"(\d{4})-||}
* "genre": "Comedy",
mdb_category.scrub {regex()|p4||\"genre\":\s\"(.+?)\",||}
* credits on p1 & p5
mdb_actor.scrub {multi()|p1|<table class="cast_list">|title="|"|</table>} *added
mdb_actor.modify {cleanup(tags="<"">")} *added
mdb_actor.scrub {regex()|p4||<h4 class="inline">Stars:</h4>\s(?:<a\shref.+?\s>(.+?)</a>,?\s)*||} * the specific episode actors
mdb_actor.scrub {multi()|p5|<table class="cast_list">|title="|"|</table>}
mdb_director.scrub {regex()|p5||Directed by.+?<a href=.+?>\s*(.+?)\r</a>||}
* starrateing on p4
mdb_starrating.scrub {regex|p4||\"ratingValue\":\s\"(\d\.\d)\"||}
mdb_starratingvotes.scrub {regex|p4||"ratingCount":\s(\d+?),||}
mdb_showicon.scrub {regex()|p4||\"image\":\s\"([^"]*)\",||} *remove characters after "
**
* evt country https://www.imdb.com/title/tt1610527/locations?ref_=ttco_sa_4
* review and commentsummary only from the 'top' series page p1/review (rarely found on episode pages)
mdb_commentsummary.scrub {regex()|p6||class=\"title\"\s>\s(.+?)\s+?</a>||}
mdb_commentsummary.modify {substring(type=element)|0 5}
mdb_review.scrub {regex()|p6||^.*?<div class=\"content\">\s+<div class=\"text.*?\">(.+?)<\/div>||} 
mdb_review.modify {cleanup}
mdb_plot.scrub {regex()|p4||<div class=\"summary_text\">\s+([^<?a?]*)\s+?.*<||} * was adding "see full summary" + "add a plot"
mdb_description.scrub {regex()|p1||<div class=\"summary_text\">\\s+(.*)\s+[^<]*<||}* was adding "see full summary"
"url": "/title/tt9165588/",
  "name": "Mañana de domingo",
mdb_subtitle.scrub {regex()|p4||"url": "/title/tt\d{7,8}/\",\s+?\"name\":\s\"(.+?)\",||}
* episode from p4   <div class="bp_heading">Season 3 <span class="ghost">!?!?!</span> Episode 3</div>
mdb_temp_2.scrub {regex|p4||<div class=\"bp_heading\">Season\s*(\d+?)\s*<span||} * seasom
mdb_temp_3.scrub {regex|p4||</span>\s*Episode\s*(\d+?)\s*</div>||} * episode
* episode in onscreen system. Will be converted to the site episodesystem value automatically
mdb_episode.modify {set("")|S'mdb_temp_2' E'mdb_temp_3'}
end_scope
